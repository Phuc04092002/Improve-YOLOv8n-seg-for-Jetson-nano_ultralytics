# Ultralytics üöÄ AGPL-3.0 License - https://ultralytics.com/license

import time

import cv2

from ultralytics import YOLO

# Load model
model = YOLO("runs/segment/yolov8_custom_train5/weights/best.pt")

# M·ªü camera (0 = webcam m·∫∑c ƒë·ªãnh, c√≥ th·ªÉ ƒë·ªïi th√†nh 1,2... n·∫øu nhi·ªÅu cam)
cap = cv2.VideoCapture(0)

# Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc khung h√¨nh (n·∫øu mu·ªën)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    start_time = time.time()

    # Predict (tr·∫£ v·ªÅ k·∫øt qu·∫£ YOLO)
    results = model.predict(frame, imgsz=640, conf=0.5, verbose=False)

    # V·∫Ω k·∫øt qu·∫£ tr·ª±c ti·∫øp l√™n frame
    annotated_frame = results[0].plot()

    # T√≠nh FPS v√† t·ªëc ƒë·ªô
    end_time = time.time()
    inference_time = (end_time - start_time) * 1000  # ms
    fps = 1 / (end_time - start_time)

    # Hi·ªÉn th·ªã t·ªëc ƒë·ªô & FPS l√™n ·∫£nh
    cv2.putText(
        annotated_frame, f"Inference: {inference_time:.1f} ms", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2
    )
    cv2.putText(annotated_frame, f"FPS: {fps:.1f}", (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

    # Hi·ªÉn th·ªã khung h√¨nh
    cv2.imshow("YOLOv8 Segmentation - Camera", annotated_frame)

    # Nh·∫•n ESC ƒë·ªÉ tho√°t
    if cv2.waitKey(1) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
